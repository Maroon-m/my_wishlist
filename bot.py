import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from aiohttp import web 

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_IDS = [877872483]
BACKEND_URL = os.getenv("BACKEND_URL", "https://my-wishlist.onrender.com")

bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher()

@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ /admin, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∞–¥–º–∏–Ω–∫—É.")

@dp.message(Command("admin"))
async def cmd_admin(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    url = f"{BACKEND_URL}/admin?user_id={message.from_user.id}"
    await message.answer(f"üëë –í–æ—Ç –∞–¥–º–∏–Ω–∫–∞:\n<a href=\"{url}\">–û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω–∫—É</a>")

@dp.message(Command("reset"))
async def cmd_reset(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    import aiohttp
    async with aiohttp.ClientSession() as s:
        r = await s.post(f"{BACKEND_URL}/admin/reset", json={"user_id": message.from_user.id})
        if r.status == 200:
            await message.answer("‚úÖ –í—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã.")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")

async def main():
    # üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º aiogram
    asyncio.create_task(dp.start_polling(bot))

    # üåê –§–∏–∫—Ç–∏–≤–Ω—ã–π HTTP-—Å–µ—Ä–≤–µ—Ä, —á—Ç–æ–±—ã Render –≤–∏–¥–µ–ª –ø–æ—Ä—Ç
    async def hello(request):
        return web.Response(text="Bot is running.")

    app = web.Application()
    app.add_routes([web.get("/", hello)])

    # üü¢ Render —Å–ª—É—à–∞–µ—Ç PORT –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    port = int(os.environ.get("PORT", 10000))
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()

    print(f"Bot is up and running on port {port}")
    while True:
        await asyncio.sleep(3600)

if __name__ == "__main__":
    asyncio.run(main())
