from flask import Flask, request, jsonify
import time, hmac, hashlib, os, html
from datetime import datetime, timedelta, timezone
from flask_cors import CORS
import psycopg
from psycopg.rows import dict_row

app = Flask(__name__)
CORS(app)

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_IDS = [877872483]
DATABASE_URL = os.getenv("DATABASE_URL")

def verify_telegram(data):
    check = "\n".join(f"{k}={data[k]}" for k in sorted(data) if k not in ['hash', 'gift_id'])
    secret = hashlib.sha256(BOT_TOKEN.encode()).digest()
    if hmac.new(secret, check.encode(), hashlib.sha256).hexdigest() != data['hash']:
        return False
    if time.time() - int(data.get('auth_date', 0)) > 86400:
        return False
    return True

def get_db():
    conn = psycopg.connect(DATABASE_URL, autocommit=True, row_factory=dict_row)
    with conn.cursor() as cur:
        cur.execute("""
        CREATE TABLE IF NOT EXISTS gifts (
            id SERIAL PRIMARY KEY,
            title TEXT,
            description TEXT,
            link TEXT,
            category TEXT,
            given BOOLEAN DEFAULT FALSE
        );
        """)
        cur.execute("""
        CREATE TABLE IF NOT EXISTS reserves (
            gift_id INTEGER,
            tg_id BIGINT,
            username TEXT,
            timestamp BIGINT
        );
        """)
        cur.execute("""
        CREATE TABLE IF NOT EXISTS overlimit_attempts (
            tg_id BIGINT,
            username TEXT,
            timestamp BIGINT
        );
        """)

        cur.execute("SELECT COUNT(*) FROM gifts;")
        if cur.fetchone()['count'] == 0:
            sample = [
                ("–ú–æ–¥–µ–ª—å Breyer Catch Me", "–ú–æ–∂–Ω–æ –≤—ã–ª–æ–≤–∏—Ç—å –Ω–∞ <a href='https://www.avito.ru/sankt-peterburg/kollektsionirovanie/loshad_breyer_traditional_catch_me_19_7299481316' target='_blank'>–ê–≤–∏—Ç–æ</a>"
, "https://www.breyerhorses.com/products/catch-me", "–°–∞–º—ã–µ –∂–µ–ª–∞–Ω–Ω—ã–µ"),
                ("Instax —Ñ–æ—Ç–æ–∞–ø–ø–∞—Ä–∞—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –ø–µ—á–∞—Ç–∏", "–ò–ª–∏ –±–µ–ª–µ–Ω—å–∫–∏–π –ø–æ–ª–∞—Ä–æ–∏–¥, –Ω–æ –æ–Ω, –∫–∞–∂–µ—Ç—Å—è, –µ—â—ë –¥–æ—Ä–æ–∂–µ :(", "https://www.ozon.ru/product/fotoapparat-mgnovennoy-pechati-fujifilm-mini-12-zelenyy-1047331780", "–°–∞–º—ã–µ –∂–µ–ª–∞–Ω–Ω—ã–µ"),
                ("–°–µ—Å—Å–∏—è —Å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º", "", "", "–ó–¥–æ—Ä–æ–≤—å–µ"),
                ("–ú–†–§-—Ä–æ–ª–∏–∫", "", "", "–ó–¥–æ—Ä–æ–≤—å–µ"),
                ("–†—É—á–Ω–æ–π –æ—Ç–ø–∞—Ä–∏–≤–∞—Ç–µ–ª—å", "", "", "–ü–æ–ª–µ–∑–Ω–æ—Å—Ç–∏"),
                ("–°—É–ø–æ–≤—ã–µ —Ç–∞—Ä–µ–ª–æ—á–∫–∏", "", "https://www.ozon.ru/product/tarelka-glubokaya-supovaya-1-1-l-magistro-tserera-salatnik-farforovyy-tsvet-seryy-496865823/", "–ü–æ–ª–µ–∑–Ω–æ—Å—Ç–∏"),
                ("–ù–∞–±–æ—Ä –∫—É—Ö–æ–Ω–Ω—ã—Ö –ø–æ–ª–æ—Ç–µ–Ω–µ—Ü –∏–∑ –∏–∫–µ–∏", "–ü—Ä–∏–º–µ—Ä –ø–æ —Å—Å—ã–ª–∫–µ", "https://www.ozon.ru/product/ikea-rinnig-polotentse-kuhonnoe-belyy-temno-seryy-s-risunkom-45x60-sm-1664361323/", "–ü–æ–ª–µ–∑–Ω–æ—Å—Ç–∏"),
                ("–î–∏—Ñ—Ñ—É–∑–æ—Ä Hygge #4", "–ò—Å—Ç–æ—á–Ω–∏–∫ –≥–∞—Ä–º–æ–Ω–∏–∏", "", "–ü—Ä–∏—è—Ç–Ω–æ—Å—Ç–∏"),
                ("–°–∫—Ä–∞–± –¥–ª—è —Ç–µ–ª–∞", "–û–±–æ–∂–∞—é –ª–µ–º–æ–Ω–≥—Ä–∞—Å—Å –∏–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–¥–æ–±–Ω–æ–µ", "", "–ü—Ä–∏—è—Ç–Ω–æ—Å—Ç–∏"),
                ("–≠–Ω–∑–∏–º–Ω–∞—è –ø—É–¥—Ä–∞ –¥–ª—è —É–º—ã–≤–∞–Ω–∏—è", "", "", "–ü—Ä–∏—è—Ç–Ω–æ—Å—Ç–∏"),
                ("–ü—Ä–æ—Ç–µ–∏–Ω–æ–≤—ã–µ –≤–∫—É—Å–Ω—è—Ö–∏", "(–±–µ–∑ —à–æ–∫–æ–ª–∞–¥–∞, –ø—Ä–∏–º–µ—Ä –ø–æ —Å—Å—ã–ª–∫–µ)", "https://www.ozon.ru/product/fitnesshock-proteinovoe-pechene-bez-sahara-biskvit-romovaya-baba-10-sht-1683729709/", "–ü—Ä–∏—è—Ç–Ω–æ—Å—Ç–∏"),
                ("–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä—å–≥–∏", "", "", "–ü—Ä–∏—è—Ç–Ω–æ—Å—Ç–∏"),
                ("–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã Ozon, –ó–æ–ª–æ—Ç–æ–µ –Ø–±–ª–æ–∫–æ", "", "", "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ"),
                ("–ü–æ–¥–ø–∏—Å–∫–∞ —Ç–≥ –ø—Ä–µ–º–∏—É–º", "", "", "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ"),
                ("–ò–≥—Ä–æ–≤–∞—è –ø—Ä–∏—Å—Ç–∞–≤–∫–∞ Sony PlayStation 5", "", "", "–î–∞–Ω–∏–ª–∞, —Ç—ã —á—Ç–æ, –∫—Ä–µ–π–∑–∏?"),
                ("–í–∏–Ω–∏–ª–æ–≤—ã–π –ø—Ä–æ–∏–≥—Ä—ã–≤–∞—Ç–µ–ª—å", "", "", "–î–∞–Ω–∏–ª–∞, —Ç—ã —á—Ç–æ, –∫—Ä–µ–π–∑–∏?"),
                ("–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è —Ä–æ–∂–∫–æ–≤–∞—è –∫–æ—Ñ–µ–º–∞—à–∏–Ω–∞", "", "", "–î–∞–Ω–∏–ª–∞, —Ç—ã —á—Ç–æ, –∫—Ä–µ–π–∑–∏?"),
            ]
            for i, s in enumerate(sample, 1):
                cur.execute("INSERT INTO gifts (id, title, description, link, category) VALUES (%s, %s, %s, %s, %s);", (i, *s))
    return conn

db = get_db()

@app.route('/wishlist')
def wishlist():
    with db.cursor() as cur:
        cur.execute('SELECT id, title, description, link, category FROM gifts;')
        gifts = []
        for row in cur.fetchall():
            cur.execute('SELECT count(*) FROM reserves WHERE gift_id=%s;', (row['id'],))
            reserved = cur.fetchone()['count'] > 0
            gifts.append(dict(id=row['id'], title=row['title'], desc=row['description'], link=row['link'], category=row['category'], reserved=reserved))
        return jsonify(gifts)

@app.route('/reserve', methods=['POST'])
def reserve():
    data = request.json
    user = data.get('user')
    gift_id = data.get('gift_id')
    tg_id, uname = user.get('id'), user.get('username', '')

    if not tg_id:
        return jsonify({"error": "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞, –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∞–π—Ç–∞"}), 400

    with db.cursor() as cur:
        cur.execute('SELECT count(*) FROM reserves WHERE tg_id=%s;', (tg_id,))
        if cur.fetchone()['count'] >= 3:
            cur.execute(
            "INSERT INTO overlimit_attempts VALUES (%s, %s, %s);",
            (tg_id, uname, int(time.time()))
            )
            return jsonify({"error": "–¢—ã –Ω–µ –º–æ–∂–µ—à—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª—å—à–µ —Ç—Ä–µ—Ö –ø–æ–¥–∞—Ä–∫–æ–≤"}), 400

        cur.execute('SELECT 1 FROM reserves WHERE gift_id=%s;', (gift_id,))
        if cur.fetchone():
            return jsonify({"error": "–≠—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫ —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω"}), 400

        cur.execute('INSERT INTO reserves VALUES (%s, %s, %s, %s);', (gift_id, tg_id, uname, int(time.time())))
        return jsonify({"ok": True})

@app.route('/admin')
def admin():
    user = request.args
    uid = user.get("id")
    if str(uid) not in map(str, ADMIN_IDS) or not verify_telegram(user):
        return "No access", 403

    tz_msk = timezone(timedelta(hours=3))  # –ú–°–ö

    with db.cursor() as cur:
        cur.execute('SELECT gift_id, tg_id, username, timestamp FROM reserves;')
        rows = cur.fetchall()

    html_out = f"""
    <!DOCTYPE html>
    <html lang="ru">
    <head>
      <meta charset="UTF-8">
      <title>–ê–¥–º–∏–Ω–∫–∞</title>
      <style>
        body {{ font-family: Arial, sans-serif; padding: 20px; }}
        table {{ border-collapse: collapse; width: 100%; margin-bottom: 32px; }}
        th, td {{ border: 1px solid #ccc; padding: 8px; text-align: left; }}
        th {{ background-color: #f5f5f5; }}
        .clickable {{ cursor: pointer; color: #999; }}
      </style>
      <script>
        function reveal(span, text) {{
          span.innerText = text;
          span.style.color = '#000';
        }}
      </script>
    </head>
    <body>
    <h1>–ê–¥–º–∏–Ω–∫–∞</h1>
    <p><a href="/admin/gifts?id={uid}&username={user.get("username")}&auth_date={user.get("auth_date")}&hash={user.get("hash")}">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞–º–∏</a></p>
    <table>
      <tr><th>–ü–æ–¥–∞—Ä–æ–∫</th><th>ID</th><th>–õ–æ–≥–∏–Ω</th><th>–í—Ä–µ–º—è (–ú–°–ö)</th><th>–°–±—Ä–æ—Å</th></tr>
    """


    for r in rows:
        dt = datetime.fromtimestamp(r["timestamp"], tz=tz_msk).strftime("%Y-%m-%d %H:%M:%S")
        link = f'/admin/reset?gift_id={r["gift_id"]}&id={uid}&hash={user["hash"]}&auth_date={user["auth_date"]}&username={user.get("username", "")}'
        uname = html.escape(r["username"] or "")
        html_out += f"""
        <tr>
          <td><span class="clickable" onclick="reveal(this, '{r["gift_id"]}')">üëÅ –†–∞—Å—Å–µ–∫—Ä–µ—Ç–∏—Ç—å</span></td>
          <td>{r["tg_id"]}</td>
          <td><span class="clickable" onclick="reveal(this, '@{uname}')">üëÅ –†–∞—Å—Å–µ–∫—Ä–µ—Ç–∏—Ç—å</span></td>
          <td>{dt}</td>
          <td><a href="{link}">–°–±—Ä–æ—Å</a></td>
        </tr>"""

    html_out += "</table>"

    with db.cursor() as cur:
        cur.execute("SELECT tg_id, username, timestamp FROM overlimit_attempts ORDER BY timestamp DESC LIMIT 10;")
        attempts = cur.fetchall()

    html_out += "<h2>–ü–æ–ø—ã—Ç–∫–∏ –ø–µ—Ä–µ–±—Ä–æ–Ω–∏</h2>\n<table><tr><th>ID</th><th>–õ–æ–≥–∏–Ω</th><th>–í—Ä–µ–º—è (–ú–°–ö)</th></tr>"
    for a in attempts:
        dt = datetime.fromtimestamp(a["timestamp"], tz=tz_msk).strftime("%Y-%m-%d %H:%M:%S")
        uname = html.escape(a["username"] or "")
        html_out += f"""
        <tr>
          <td>{a["tg_id"]}</td>
          <td><span class="clickable" onclick="reveal(this, '@{uname}')">üëÅ –†–∞—Å—Å–µ–∫—Ä–µ—Ç–∏—Ç—å</span></td>
          <td>{dt}</td>
        </tr>
        """

    html_out += "</table></body></html>"
    return html_out

@app.route('/admin/reset')
def reset():
    user = request.args
    uid = user.get("id")
    if str(uid) not in map(str, ADMIN_IDS) or not verify_telegram(user):
        return "No access", 403

    gift_id = int(user.get('gift_id', 0))
    with db.cursor() as cur:
        cur.execute('DELETE FROM reserves WHERE gift_id=%s;', (gift_id,))
    return "OK"

@app.route('/admin/gifts', methods=['GET', 'POST'])
def edit_gifts():
    user = request.args
    uid = user.get("id")
    if str(uid) not in map(str, ADMIN_IDS) or not verify_telegram(user):
        return "No access", 403

    with db.cursor() as cur:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ POST (–∏–∑–º–µ–Ω–µ–Ω–∏—è)
        if request.method == 'POST':
            action = request.form.get('action')
            gift_id = request.form.get('gift_id')
            if action == 'delete':
                cur.execute('DELETE FROM gifts WHERE id=%s;', (gift_id,))
            elif action == 'toggle_given':
                cur.execute('UPDATE gifts SET given = NOT given WHERE id=%s;', (gift_id,))
            return redirect(request.url)

        # GET
        cur.execute("SELECT * FROM gifts ORDER BY category, id;")
        gifts = cur.fetchall()

    # –ü—Ä–æ—Å—Ç–∞—è HTML-—Ñ–æ—Ä–º–∞
    html_out = """
    <h1>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞–º–∏</h1>
    <table border="1" cellpadding="8">
    <tr><th>ID</th><th>–ù–∞–∑–≤–∞–Ω–∏–µ</th><th>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</th><th>–î–µ–π—Å—Ç–≤–∏—è</th></tr>
    """
    for g in gifts:
        html_out += f"""
        <tr>
            <td>{g['id']}</td>
            <td>{html.escape(g['title'])}</td>
            <td>{html.escape(g['category'])}</td>
            <td>
                <form method="post" style="display:inline">
                    <input type="hidden" name="gift_id" value="{g['id']}">
                    <button name="action" value="delete">–£–¥–∞–ª–∏—Ç—å</button>
                </form>
                <form method="post" style="display:inline">
                    <input type="hidden" name="gift_id" value="{g['id']}">
                    <button name="action" value="toggle_given">
                        {'–£–±—Ä–∞—Ç—å —Å—Ç–∞—Ç—É—Å' if g['given'] else '–û—Ç–º–µ—Ç–∏—Ç—å –ø–æ–¥–∞—Ä–µ–Ω–Ω—ã–º'}
                    </button>
                </form>
            </td>
        </tr>
        """
    html_out += "</table>"
    return html_out

@app.route('/admin/gifts')
def admin_gifts():
    user = request.args
    uid = user.get("id")
    if str(uid) not in map(str, ADMIN_IDS) or not verify_telegram(user):
        return "No access", 403

    with db.cursor() as cur:
        cur.execute('SELECT * FROM gifts ORDER BY category, id;')
        gifts = cur.fetchall()

    html = """
    <!DOCTYPE html>
    <html lang="ru">
    <head>
      <meta charset="UTF-8">
      <title>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏</title>
      <style>
        body { font-family: sans-serif; padding: 20px; max-width: 800px; margin: auto; }
        table { border-collapse: collapse; width: 100%; margin-bottom: 32px; }
        th, td { border: 1px solid #ccc; padding: 6px 10px; }
        th { background: #eee; }
        input, textarea { width: 100%; margin-bottom: 6px; }
        .given { color: gray; text-decoration: line-through; }
      </style>
    </head>
    <body>
      <h1>–†–µ–¥–∞–∫—Ç–æ—Ä –ø–æ–¥–∞—Ä–∫–æ–≤</h1>

      <h2>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π</h2>
      <form method="post" action="/admin/gift/add?id={{id}}&username={{username}}&auth_date={{auth_date}}&hash={{hash}}">
        <p><input name="title" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ" required></p>
        <p><textarea name="description" placeholder="–û–ø–∏—Å–∞–Ω–∏–µ"></textarea></p>
        <p><input name="link" placeholder="–°—Å—ã–ª–∫–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"></p>
        <p><input name="category" placeholder="–ö–∞—Ç–µ–≥–æ—Ä–∏—è" required></p>
        <p><button type="submit">–î–æ–±–∞–≤–∏—Ç—å</button></p>
      </form>

      <h2>–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–¥–∞—Ä–∫–∏</h2>
      <table>
        <tr><th>ID</th><th>–ù–∞–∑–≤–∞–Ω–∏–µ</th><th>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</th><th>–°—Ç–∞—Ç—É—Å</th><th>–î–µ–π—Å—Ç–≤–∏—è</th></tr>
        {% for g in gifts %}
          <tr class="{{ 'given' if g['given'] else '' }}">
            <td>{{ g['id'] }}</td>
            <td>{{ g['title'] }}</td>
            <td>{{ g['category'] }}</td>
            <td>{{ '–ü–æ–¥–∞—Ä–µ–Ω–æ' if g['given'] else '–û–∂–∏–¥–∞–µ—Ç' }}</td>
            <td>
              <form method="post" action="/admin/gift/delete?id={{id}}&username={{username}}&auth_date={{auth_date}}&hash={{hash}}" style="display:inline;">
                <input type="hidden" name="id" value="{{ g['id'] }}">
                <button type="submit">–£–¥–∞–ª–∏—Ç—å</button>
              </form>
              {% if not g['given'] %}
              <form method="post" action="/admin/gift/given?id={{id}}&username={{username}}&auth_date={{auth_date}}&hash={{hash}}" style="display:inline;">
                <input type="hidden" name="id" value="{{ g['id'] }}">
                <button type="submit">–ü–æ–¥–∞—Ä–µ–Ω–æ</button>
              </form>
              {% endif %}
            </td>
          </tr>
        {% endfor %}
      </table>
    </body>
    </html>
    """

    return render_template_string(html,
        gifts=gifts,
        id=uid,
        username=user.get("username"),
        auth_date=user.get("auth_date"),
        hash=user.get("hash")
    )


if __name__ == '__main__':
    app.run(host='0.0.0.0', port=10000)
